#define SECRET_DEVICE_KEY "U4ZBIU3WIB6AGHYU9FUQ";
#define SECRET_SSID "ubcvisitor";
#define SECRET_OPTIONAL_PASS "";

// Code generated by Arduino IoT Cloud, DO NOT EDIT.

#include <ArduinoIoTCloud.h>
#include <Arduino_ConnectionHandler.h>

const char DEVICE_LOGIN_NAME[]  = "c04e773a-dc09-462d-b7ef-7df3c32961d6";

const char SSID[]               = SECRET_SSID;    // Network SSID (name)
const char PASS[]               = SECRET_OPTIONAL_PASS;    // Network password (use for WPA, or use as key for WEP)
const char DEVICE_KEY[]  = SECRET_DEVICE_KEY;    // Secret device password

void onMaxPresChange();
void onMaxTempChange();
void onSetValuePresChange();
void onSetValueTempChange();
void onSendEmailChange();
void onSurpassedMaxPresChange();
void onSurpassedMaxTempChange();
void onValveHopperChange();
void onValveProductChange();
void onValveWasteChange();

float maxPres;
float maxTemp;
float readingDensity;
float readingPh;
float readingPressure;
float readingTemp;
float setValuePres;
float setValueTemp;
bool sendEmail;
bool surpassedMaxPres;
bool surpassedMaxTemp;
bool systemStatus;
bool valveHopper;
bool valveProduct;
bool valveWaste;

void initProperties(){

  ArduinoCloud.setBoardId(DEVICE_LOGIN_NAME);
  ArduinoCloud.setSecretDeviceKey(DEVICE_KEY);
  ArduinoCloud.addProperty(maxPres, READWRITE, ON_CHANGE, onMaxPresChange);
  ArduinoCloud.addProperty(maxTemp, READWRITE, ON_CHANGE, onMaxTempChange);
  ArduinoCloud.addProperty(readingDensity, READ, 10 * SECONDS, NULL);
  ArduinoCloud.addProperty(readingPh, READ, 10 * SECONDS, NULL);
  ArduinoCloud.addProperty(readingPressure, READ, 10 * SECONDS, NULL);
  ArduinoCloud.addProperty(readingTemp, READ, 10 * SECONDS, NULL);
  ArduinoCloud.addProperty(setValuePres, READWRITE, ON_CHANGE, onSetValuePresChange);
  ArduinoCloud.addProperty(setValueTemp, READWRITE, ON_CHANGE, onSetValueTempChange);
  ArduinoCloud.addProperty(sendEmail, READWRITE, ON_CHANGE, onSendEmailChange);
  ArduinoCloud.addProperty(surpassedMaxPres, READWRITE, 1 * SECONDS, onSurpassedMaxPresChange);
  ArduinoCloud.addProperty(surpassedMaxTemp, READWRITE, 1 * SECONDS, onSurpassedMaxTempChange);
  ArduinoCloud.addProperty(systemStatus, READ, 1 * SECONDS, NULL);
  ArduinoCloud.addProperty(valveHopper, READWRITE, ON_CHANGE, onValveHopperChange);
  ArduinoCloud.addProperty(valveProduct, READWRITE, ON_CHANGE, onValveProductChange);
  ArduinoCloud.addProperty(valveWaste, READWRITE, ON_CHANGE, onValveWasteChange);

}

WiFiConnectionHandler ArduinoIoTPreferredConnection(SSID, PASS);
