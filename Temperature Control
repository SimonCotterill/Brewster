const int COMPR_PIN = 7;
const int FAN_PIN = 8;
const int PUMP_PIN = 9;

unsigned long previous_chiller_Millis = 0;  // Variable to store the last time the compressor was on
const long off_time = 420000;       // Interval at which to wait before turning chiller back on again (7 mins)
const long run_time = 1200000;      // Interval at which to wait before turning chiller off (20 mins)

unsigned long previous_pump_Millis = 0; // variable to store the last time the pump was on

int chiller_flag = 0;
int pump_flag=0; // both things should start off

void setup() {
  pinMode(COMPR_PIN, OUTPUT);
  pinMode(FAN_PIN, OUTPUT);
  pinMode(PUMP_PIN, OUTPUT);
  Serial.begin(9600);
}

void loop() {
  unsigned long current_chiller_Millis = millis();  // Get the current time
  unsigned long current_pump_Millis = millis();
 

}

// function for intermittent pump control
int run_Pump_inter (long currentMillis, long previousMillis, int flag, float on_interval, float off_interval){
  if (flag ==0){
    if (currentMillis - previousMillis >= off_interval){
    previousMillis=currentMillis;
    turn_pump_On();}
} 
if (flag==1){
  if (currentMillis - previousMillis >= on_interval){
  previousMillis=currentMillis;
  turn_pump_Off(); }
}
}


// functions for chiller

int turnOn(int flag, long currentMillis, long previousMillis, float OnInterval, float OffInterval){
  if (flag ==0){
    if (currentMillis -previousMillis >= OffInterval){
    turn_chiller_on();}
}
  if (flag == 1){
   if (currentMillis -previousMillis >= OnInterval){
  turn_chiller_off();}
}
}

int turn_pump_On(void){
  digitalWrite(PUMP_PIN, HIGH);
  pump_flag = 1;
  return pump_flag;
}

int turn_pump_off(void){
  digitalWrite(PUMP_PIN, LOW);
  pump_flag =1;
  return pump_flag;
}

int turn_chiller_on(void){
  digitalWrite(COMPR_PIN, HIGH);
  digitalWrite(FAN_PIN, HIGH);
  chiller_flag=1;
  return chiller_flag;
}

int turn_chiller_off(void){
  digitalWrite(COMPR_PIN, LOW);
  digitalWrite(FAN_PIN, LOW);
  chiller_flag=0;
  return chiller_flag;
}

