  /* 
  Sketch generated by the Arduino IoT Cloud Thing "Untitled"
  https://create.arduino.cc/cloud/things/2788c8ff-181d-492b-b3bb-f66f8c82862e 

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  String fermentationEnd;
  String processStage;
  float coldCrashTime;
  float diacetylRestTime;
  float diacetylThreshVal;
  float maxPres;
  float maxTemp;
  float readingDensity;
  float readingPh;
  float readingPressure;
  float readingTemp;
  float setValueDensity;
  float setValuePres;
  float setValueTemp;
  float tempColdCrash;
  float tempDiacetylRest;
  float tempFermentation;
  bool processNextStage;
  bool processPause;
  bool processStart;
  bool processStop;
  bool sendEmail;
  bool surpassedMaxPres;
  bool surpassedMaxTemp;
  bool systemStatus;
  bool valveHopper;
  bool valveProduct;
  bool valveWaste;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/


//Includes
#include "thingProperties.h"

// chiller and pump declarations
float tempDif = 0;

unsigned long previous_chiller_Millis = 0;  // Variable to store the last time the compressor was on
const long chiller_off_time = 3000;       // Interval at which to wait before turning chiller back on again (7 min = 420000ms)
const long chiller_on_time = 7000;      // Interval at which to wait before turning chiller off (20 mins = 1 200 000ms)

unsigned long previous_pump_Millis = 0; // variable to store the last time the pump was on
long pump_on_time = 7000; // for intermittent pumping, how long the pump is on
long pump_off_time = 3000; // for intermittent pumping, how long the pump is off

int chiller_flag = 0;
int pump_flag=0; // both things should start off

unsigned long current_chiller_Millis;
unsigned long current_pump_Millis;

//Temperature Probe items, from
//Rui Santos, https://randomnerdtutorials.com
#include <OneWire.h>
#include <DallasTemperature.h>
// Data wire is conntec to the Arduino digital pin 4
#define ONE_WIRE_BUS 3
// Setup a oneWire instance to communicate with any OneWire devices
OneWire oneWire(ONE_WIRE_BUS);
// Pass our oneWire reference to Dallas Temperature sensor 
DallasTemperature sensors(&oneWire);


//Pressure Probe items
//from Ovens Garage: Pressure Sensor - Arduino
const int PressurePin = 4;
const int pressureZero = 0.5; //analog reading of pressure transducer at 0psi
const int pressureMax = 4.5; //analog reading of pressure transducer at 150psi
const int pressureTransducerMaxPSI = 30;
float pressureValue = 0;


//pin setup
//ball valves / connect to cloud
int Hopper = 18;
int Product = 19;
int Waste = 20;
//solenoid
int Valve1 = 21;
int Valve2 = 26;
int Valve3 = 33;
int Valve4 = 34;
//Sensors
//  Temperature = 3;
//  PressurePin = 4;
const int CHILLER_PIN = 7;
const int PUMP_PIN = 8;


void setup() {
  // Initialize serial with computer and wait for port to open
  Serial.begin(19200);

  // Defined in thingProperties.h
  initProperties();

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);

  //The following allows you to obtain more information
  //about the state of network and IoT Cloud connection and errors
  //the higher number the more granular information youâ€™ll get.
  //The default is 0 (only errors). Maximum is 4
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();

  // Define Pins
  pinMode(Hopper, OUTPUT);
  pinMode(Product, OUTPUT);
  pinMode(Waste, OUTPUT);
  
  pinMode(Valve1, OUTPUT);
  pinMode(Valve2, OUTPUT);
  pinMode(Valve3, OUTPUT);
  pinMode(Valve4, OUTPUT);
  pinMode(CHILLER_PIN, OUTPUT);
  pinMode(PUMP_PIN, OUTPUT);
}


void loop() {
  //Make Valve Check Variables
  bool hopperCheck;
  bool wasteCheck;
  bool productCheck;

  bool solenoidCheck1;
  bool solenoidCheck2;
  bool solenoidCheck3;
  bool solenoidCheck4;

  bool valveOpen;
  
  //Check the stage
  checkStage();
  
  //Update Arduino Values
  ArduinoCloud.update();

  //to automatically reconnect if wifi is lost
  WiFi.setAutoReconnect(true);
  WiFi.persistent(true);

  //Controlling Valves and checking if open
  hopperCheck = valveControl(valveHopper, Hopper);
  productCheck = valveControl(valveProduct, Product);
  wasteCheck = valveControl(valveWaste, Waste);

  //Controlling Solenoids and checking if open

  if (hopperCheck || productCheck || wasteCheck){
    valveOpen = true;
  } else {
    valveOpen = false;
  }

  //Temperature Readings
  sensors.requestTemperatures();
  if (processPause == false & valveOpen == false){
    readingTemp = sensors.getTempCByIndex(0);
  }

  //Pressure Readings
  if (processPause == false & valveOpen == false){
      readPressure();
  }

  //Surpassed Max Safety Values Check
  surpassedMax(maxTemp, readingTemp);
  surpassedMax(maxPres, readingPressure);

  //Update system status
  systemStatusChecker();
}


void surpassedMax(float maxAllowedValue, float value){
  if (value > maxAllowedValue){
    if (value == readingPressure){
      surpassedMaxPres = true;
    } else if (value == readingTemp){
      surpassedMaxTemp = true;
    }
  } else {
    if (value == readingPressure){
      surpassedMaxPres = false;
    } else if (value == readingTemp){
      surpassedMaxTemp = false;
    }
  }
}


void readPressure(){
  
  //Pressure Readings - YT Vid: MESURING PRESSURE WITH ARDUINO PRESSURE SENSOR (pressure transducer)
  int analogPressure = analogRead(PressurePin); //read from sensor
  float pressureVoltage = analogPressure * (4.5 / 1023.0); //convert to voltage

  //Assume 0.5V = 0 PSI ad 4.5V = 300 PSI
  //adjust 'baselineVoltage' based on zero pressure readings

  float baselineVoltage = 0.5;
  Serial.print("baselinevoltage: ");
  Serial.print(pressureVoltage);
  Serial.println(" v");
  float pressure = (pressureVoltage - baselineVoltage) * (30.0 / (4.5 - baselineVoltage));

  Serial.print("Pressure: ");
  Serial.print(pressure);
  Serial.println(" psi");

  readingPressure = pressure;
  

  //pressureValue = analogRead(PressurePin);
  //Serial.println(pressureValue);

  /*
  pressureValue = (pressureValue - pressureZero) * (pressureTransducerMaxPSI / (pressureMax - pressureZero)); //this is the other program's suggestions
      //original suggestion: ((pressureValue - pressureZero)*pressureTransducerMaxPSI)/(pressureMax - pressureZero);
  Serial.print(pressureValue, 1);
  Serial.println("psi");
  readingPressure = pressureValue;
  */
}


bool valveControl(bool openOrClosed, int valvePin){
  bool valveOpenCheck;
  
  if (openOrClosed == true){
    digitalWrite(valvePin, HIGH);
    valveOpenCheck = true;
  }
  if (openOrClosed == false){
    digitalWrite(valvePin, LOW);
    valveOpenCheck = false;
  }

  return valveOpenCheck;
}


void systemStatusChecker(){
  if(surpassedMaxPres == true || surpassedMaxTemp == true){
    systemStatus = false;
  } else {
    systemStatus = true;
  }
  
  if (systemStatus = false){
    sendEmail = true;
  } else {
    sendEmail = false;
  }
}


void checkStage(){
  //Rest stage is "noBatch"
  if (processStage != "fermentation" & processStage != "diacetyl" & processStage != "coldCrash"){
    processStage = "noBatch";
    setValueTemp = tempColdCrash;
  }

  //Logic between stages
  if (processStage == "noBatch" & processStart){
    processStage = "fermentation";
    setValueTemp = tempFermentation;
  } else if (processStage == "fermentation" & readingDensity < (setValueDensity + diacetylThreshVal)){
    processStage = "diacetyl";
    setValueTemp = tempDiacetylRest;
  } else if (processStage == "diacetyl" & fermentationEnd == "untilComplete"){ //include the timer & density is unchanged
    processStage = "coldCrash";
    setValueTemp = tempColdCrash;
  } else if (processStage == "diacetyl" & fermentationEnd == "untilSetDensity" & readingDensity < setValueDensity){ //include the timer
    processStage = "coldCrash";
    setValueTemp = tempColdCrash;
  } else if (processStop){ //haven't added timer
    processStage = "noBatch";
    setValueTemp = tempColdCrash;
  }

  //If the "Next Stage" button is pressed, for testing
  if (processStage == "noBatch" & processNextStage){
    processStage = "fermentation";
    setValueTemp = tempFermentation;
    processNextStage = false;
  } else if (processStage == "fermentation" & processNextStage){
    processStage = "diacetyl";
    setValueTemp = tempDiacetylRest;
    processNextStage = false;
  } else if (processStage == "diacetyl" & processNextStage){
    processStage = "coldCrash";
    setValueTemp = tempColdCrash;
    processNextStage = false;
  } else if (processStage == "coldCrash" & processNextStage){
    processStage = "noBatch";
    setValueTemp = tempColdCrash;
    processNextStage = false;
  }
}


/*
  Since BoardSwitch is READ_WRITE variable, onBoardSwitchChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onBoardSwitchChange()  {
  // Add your code here to act upon BoardSwitch change
}

/*
  Since DashboardLight is READ_WRITE variable, onDashboardLightChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onDashboardLightChange()  {
  // Add your code here to act upon DashboardLight change
}

/*
  Since MaxPres is READ_WRITE variable, onDashboardLightChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onMaxPresChange()  {
  // Add your code here to act upon SetValuePres change
}

/*
  Since MaxTemp is READ_WRITE variable, onDashboardLightChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onMaxTempChange()  {
  // Add your code here to act upon SetValuePres change
}

/*
  Since SurpassedMaxPres is READ_WRITE variable, onSurpassedMaxPresChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onSurpassedMaxPresChange()  {
  // Add your code here to act upon SurpassedMaxPres change
}

/*
  Since SurpassedMaxTemp is READ_WRITE variable, onSurpassedMaxTempChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onSurpassedMaxTempChange()  {
  // Add your code here to act upon SurpassedMaxTemp change
}

/*
  Since SetValuePres is READ_WRITE variable, onSetValuePresChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onSetValuePresChange()  {
  // Add your code here to act upon SetValuePres change
}

/*
  Since SetValueTemp is READ_WRITE variable, onSetValueTempChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onSetValueTempChange()  {
  // Add your code here to act upon SetValueTemp change
}

/*
  Since SystemStatus is READ_WRITE variable, onSystemStatusChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onSystemStatusChange()  {
  // Add your code here to act upon SystemStatus change
}

/*
  Since Hopper is READ_WRITE variable, onHopperChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onHopperChange()  {
  // Add your code here to act upon Hopper change
}

/*
  Since ProductValve is READ_WRITE variable, onProductValveChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onProductValveChange()  {
  // Add your code here to act upon ProductValve change
}

/*
  Since HopperValve is READ_WRITE variable, onHopperValveChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onHopperValveChange()  {
  // Add your code here to act upon HopperValve change
}

/*
  Since ValveHopper is READ_WRITE variable, onValveHopperChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onValveHopperChange()  {
  // Add your code here to act upon ValveHopper change
}

/*
  Since ValveProduct is READ_WRITE variable, onValveProductChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onValveProductChange()  {
  // Add your code here to act upon ValveProduct change
}

/*
  Since ValveWaste is READ_WRITE variable, onValveWasteChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onValveWasteChange()  {
  // Add your code here to act upon ValveWaste change
}

/*
  Since SendEmail is READ_WRITE variable, onSendEmailChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onSendEmailChange()  {
  // Add your code here to act upon SendEmail change
}

/*
  Since TempFermentation is READ_WRITE variable, onTempFermentationChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onTempFermentationChange()  {
  // Add your code here to act upon TempFermentation change
}

/*
  Since TempColdCrash is READ_WRITE variable, onTempColdCrashChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onTempColdCrashChange()  {
  // Add your code here to act upon TempColdCrash change
}

/*
  Since TempDiacetylRest is READ_WRITE variable, onTempDiacetylRestChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onTempDiacetylRestChange()  {
  // Add your code here to act upon TempDiacetylRest change
}

/*
  Since FermentationEnd is READ_WRITE variable, onFermentationEndChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onFermentationEndChange()  {
  // Add your code here to act upon FermentationEnd change
}

/*
  Since SetValueDensity is READ_WRITE variable, onSetValueDensityChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onSetValueDensityChange()  {
  // Add your code here to act upon SetValueDensity change
}

/*
  Since DiacetylRestTime is READ_WRITE variable, onDiacetylRestTimeChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onDiacetylRestTimeChange()  {
  // Add your code here to act upon DiacetylRestTime change
}

/*
  Since DiacetylRestTemp is READ_WRITE variable, onDiacetylRestTempChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onDiacetylRestTempChange()  {
  // Add your code here to act upon DiacetylRestTemp change
}

/*
  Since ColdCrashTime is READ_WRITE variable, onColdCrashTimeChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onColdCrashTimeChange()  {
  // Add your code here to act upon ColdCrashTime change
}

/*
  Since ProcessPause is READ_WRITE variable, onProcessPauseChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onProcessPauseChange()  {
  // Add your code here to act upon ProcessPause change
}

/*
  Since ProcessStart is READ_WRITE variable, onProcessStartChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onProcessStartChange()  {
  // Add your code here to act upon ProcessStart change
}

/*
  Since ProcessStop is READ_WRITE variable, onProcessStopChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onProcessStopChange()  {
  // Add your code here to act upon ProcessStop change
}

/*
  Since DiacetylThreshVal is READ_WRITE variable, onDiacetylThreshValChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onDiacetylThreshValChange()  {
  // Add your code here to act upon DiacetylThreshVal change
}

/*
  Since ProcessNextStage is READ_WRITE variable, onProcessNextStageChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onProcessNextStageChange()  {
  // Add your code here to act upon ProcessNextStage change
}
