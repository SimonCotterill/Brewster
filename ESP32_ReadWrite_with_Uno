  /* 
  Sketch generated by the Arduino IoT Cloud Thing "Untitled"
  https://create.arduino.cc/cloud/things/2788c8ff-181d-492b-b3bb-f66f8c82862e 

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  String fermentationEnd;
  String processStage;
  float coldCrashTime;
  float diacetylRestTime;
  float diacetylThreshVal;
  float maxPres;
  float maxTemp;
  float readingDensity;
  float readingPh;
  float readingPressure;
  float readingTemp;
  float setValueDensity;
  float setValuePres;
  float setValueTemp;
  float tempColdCrash;
  float tempDiacetylRest;
  float tempFermentation;
  float timeLeft;
  bool processNextStage;
  bool processPause;
  bool processStart;
  bool processStop;
  bool sendEmail;
  bool surpassedMaxPres;
  bool surpassedMaxTemp;
  bool systemStatus;
  bool valveHopper;
  bool valveProduct;
  bool valveWaste;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/
//Includes
#include "thingProperties.h"

//Function Prototypes
void surpassedMax(float maxAllowedValue, float value);
void readPressure();
bool valveControl(bool openOrClosed, int valvePin);
void checkStage();
void setDiacetylStageTimer(unsigned long currentTime);
void setColdCrashStageTimer(unsigned long currentTime);
void baseSolenoidOutCheck(unsigned long currentTime, bool threshold);
void baseSolenoidInCheck(unsigned long currentTime, bool threshold);
bool checkUpperSetPresSurpassed(float upperSetPres);
bool checkLowerSetPresSurpassed(float lowerSetPres);
void coldCrashStageControl(unsigned long currentTime);
void hopSolenoidOutCheck();
void hopSolenoidInCheck();
void timeLeftCheck(unsigned long currentTime);

//Temperature Probe items, from
//Rui Santos, https://randomnerdtutorials.com
#include <OneWire.h>
#include <DallasTemperature.h>
// Data wire is conntec to the Arduino digital pin 4
#define ONE_WIRE_BUS 3
// Setup a oneWire instance to communicate with any OneWire devices
OneWire oneWire(ONE_WIRE_BUS);
// Pass our oneWire reference to Dallas Temperature sensor 
DallasTemperature sensors(&oneWire);


//Pressure Probe items
//from Ovens Garage: Pressure Sensor - Arduino
const int PressurePin = 4;
const float pressureZero = 0.5; //analog reading of pressure transducer at 0psi
const float pressureMax = 4.5; //analog reading of pressure transducer at 150psi
const int pressureTransducerMaxPSI = 30;
float pressureValue = 0;


//pin setup
//ball valves / connect to cloud
int Hopper = 18;
int Product = 19;
int Waste = 20;
//solenoid
int baseSolenoidOutPin = 21;
int baseSolenoidInPin = 26;
int hopSolenoidOutPin = 33;
int hopSolenoidInPin = 34;
//Sensors
//  Temperature = 3;
//  PressurePin = 4;


//Solenoid Check Times
unsigned long prevTime_BaseSolenoidOutClose = millis();
unsigned long prevTime_BaseSolenoidOutOpen = millis();
unsigned long prevTime_BaseSolenoidInClose = millis();
unsigned long prevTime_BaseSolenoidInOpen = millis();
//Density Reading Times
unsigned long prevTime_Density = millis();
//Stage Start Times
unsigned long diacetylStartTime = 0;
unsigned long coldCrashStartTime = 0;
unsigned long hopDropStartTime = 0;
//
unsigned long interval_DiacetylRest;
unsigned long interval_ColdCrash;
//Set Time Intervals
long interval_OneSecond = 1000;
long interval_TenSecond = 10000;

bool coldCrashReady = false;
bool diacetylReady = false;
bool changedToDiacetyl = false;
bool changedToColdCrash = false;

//Solenoid Valve Variables
bool baseSolenoidOut = false;
bool baseSolenoidIn = false;
bool hopSolenoidOut = false;
bool hopSolenoidIn = false;

void setup() {
  // Initialize serial with computer and wait for port to open
  Serial.begin(19200);

  // Defined in thingProperties.h
  initProperties();

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);

  //The following allows you to obtain more information
  //about the state of network and IoT Cloud connection and errors
  //the higher number the more granular information youâ€™ll get.
  //The default is 0 (only errors). Maximum is 4
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();

  // Define Pins
  pinMode(Hopper, OUTPUT);
  pinMode(Product, OUTPUT);
  pinMode(Waste, OUTPUT);
  
  pinMode(baseSolenoidOutPin, OUTPUT);
  pinMode(baseSolenoidInPin, OUTPUT);
  pinMode(hopSolenoidOutPin, OUTPUT);
  pinMode(hopSolenoidInPin, OUTPUT);
}


void loop() {
  //ESP32 time since startup
  unsigned long currentTime = millis();
  //Change Stage Set times
  if (processStage != "diacetyl"){
    interval_DiacetylRest = diacetylRestTime * 3600000;
  }
  if (processStage != "coldCrash"){
    interval_ColdCrash = coldCrashTime * 3600000;
  }

  //Manual Valve Variables
  bool hopperCheck;
  bool wasteCheck;
  bool productCheck;
  //General Valve Bool
  bool valveOpen;

  //Upper and lower bounds around the Set Pressure
  float upperSetPres = setValuePres + 1;
  float lowerSetPres = setValuePres - 1;
  //Check if they're surpassed
  bool upperSetPresSurpassed = checkUpperSetPresSurpassed(upperSetPres);
  bool lowerSetPresSurpassed = checkLowerSetPresSurpassed(lowerSetPres);

  //Set Diacetyl Stage Timer
  setDiacetylStageTimer(currentTime);
  //Set Cold Crash Stage Timer
  setColdCrashStageTimer(currentTime);
  //Set Fermentation Stage Timer
  //setFermentationStageTimer(currentTime);

  //Change to done if Cold Crash time is reached
  coldCrashStageControl(currentTime);
  diacetylStageControl(currentTime);
  //Check the stage
  checkStage();
  
  //Update Arduino Values
  ArduinoCloud.update();

  //to automatically reconnect if wifi is lost
  WiFi.setAutoReconnect(true);
  WiFi.persistent(true);

  //Controlling Valves and checking if open
  hopperCheck = valveControl(valveHopper, Hopper);
  productCheck = valveControl(valveProduct, Product);
  wasteCheck = valveControl(valveWaste, Waste);

  //Checking if Base Solenoids should be open
  baseSolenoidOutCheck(currentTime, upperSetPresSurpassed);
  baseSolenoidInCheck(currentTime, lowerSetPresSurpassed);

  //Controlling Hop Solenoids and checking if open
  hopSolenoidOutCheck();
  hopSolenoidInCheck();

  //opening or closing solenoid valves
  valveControl(baseSolenoidOut, baseSolenoidOutPin);
  valveControl(baseSolenoidIn, baseSolenoidInPin);
  valveControl(hopSolenoidOut, hopSolenoidOutPin);
  valveControl(hopSolenoidOut, hopSolenoidInPin);

  if (hopperCheck || productCheck || wasteCheck || baseSolenoidOut || baseSolenoidIn || hopSolenoidOut || hopSolenoidIn){
    valveOpen = true;
  } else {
    valveOpen = false;
  }

  //Temperature Readings
  sensors.requestTemperatures();
  if (processPause == false & valveOpen == false){
    readingTemp = sensors.getTempCByIndex(0);
  }

  //Pressure Readings
  if (processPause == false & valveOpen == false){
      readPressure();
  }

  //Surpassed Max Safety Values Check
  surpassedMax(maxTemp, readingTemp);
  surpassedMax(maxPres, readingPressure);

  //check time left
  timeLeftCheck(currentTime);

  //Update system status
  //systemStatusChecker();

  Serial.println("");
}


void surpassedMax(float maxAllowedValue, float value){
  if (value > maxAllowedValue){
    if (value == readingPressure){
      surpassedMaxPres = true;
    } else if (value == readingTemp){
      surpassedMaxTemp = true;
    }
  } else {
    if (value == readingPressure){
      surpassedMaxPres = false;
    } else if (value == readingTemp){
      surpassedMaxTemp = false;
    }
  }
}


void readPressure(){
  //Pressure Readings - YT Vid: MESURING PRESSURE WITH ARDUINO PRESSURE SENSOR (pressure transducer)
  int analogPressure = analogRead(PressurePin); //read from sensor
  float pressureVoltage = analogPressure * (4.5 / 1023.0); //convert to voltage

  //Assume 0.5V = 0 PSI ad 4.5V = 300 PSI
  //adjust 'baselineVoltage' based on zero pressure readings

  float baselineVoltage = 0.5;
  Serial.print("baselinevoltage: ");
  Serial.print(pressureVoltage);
  Serial.println(" v");
  float pressure = (pressureVoltage - baselineVoltage) * (30.0 / (4.5 - baselineVoltage));

  Serial.print("Pressure: ");
  Serial.print(pressure);
  Serial.println(" psi");

  readingPressure = pressure;
  

  //pressureValue = analogRead(PressurePin);
  //Serial.println(pressureValue);

  /*
  pressureValue = (pressureValue - pressureZero) * (pressureTransducerMaxPSI / (pressureMax - pressureZero)); //this is the other program's suggestions
      //original suggestion: ((pressureValue - pressureZero)*pressureTransducerMaxPSI)/(pressureMax - pressureZero);
  Serial.print(pressureValue, 1);
  Serial.println("psi");
  readingPressure = pressureValue;
  */
}


bool valveControl(bool openOrClosed, int valvePin){
  bool valveOpenCheck;
  
  if (openOrClosed == true){
    digitalWrite(valvePin, HIGH);
    valveOpenCheck = true;
  }
  if (openOrClosed == false){
    digitalWrite(valvePin, LOW);
    valveOpenCheck = false;
  }

  return valveOpenCheck;
}


/*
void systemStatusChecker(){
  if(surpassedMaxPres == true || surpassedMaxTemp == true){
    systemStatus = false;
  } else {
    systemStatus = true;
  }
  
  if (systemStatus == false){
    sendEmail = true;
  } else {
    sendEmail = false;
  }
}
*/


void checkStage(){
  //Rest stage is "noBatch"
  if (processStage != "fermentation" & processStage != "diacetyl" & processStage != "coldCrash" & processStage != "done"){
    processStage = "noBatch";
    setValueTemp = tempColdCrash;
  }

  //Logic between stages
  if (processStage == "noBatch" & processStart){
    processStage = "fermentation";
    setValueTemp = tempFermentation;
    Serial.println("switched from noBatch to fermentation after process start");
  } else if (processStage == "fermentation" & readingDensity < (setValueDensity + diacetylThreshVal)){
    processStage = "diacetyl";
    diacetylReady = false;
    setValueTemp = tempDiacetylRest;
    Serial.println("switched from fermentation to diacetyl since density was below value+threshold");
  } else if (processStage == "diacetyl" & fermentationEnd == "untilComplete" & diacetylReady){ //include the timer & density is unchanged
    processStage = "coldCrash";
    coldCrashReady = false;
    setValueTemp = tempColdCrash;
    Serial.println("switched from diacetyl to cold crash cause time was ready, and set to fermentationEnd");
  } else if (processStage == "diacetyl" & fermentationEnd == "untilSetDensity" & readingDensity < setValueDensity & diacetylReady){ //include the timer
    processStage = "coldCrash";
    coldCrashReady = false;
    setValueTemp = tempColdCrash;
    Serial.println("switched from diacetyl to cold crash cause time was ready and density below set value");
  } else if (processStage == "coldCrash" & coldCrashReady == true){
    processStage = "done";
    setValueTemp = tempColdCrash;
    Serial.println("switched from coldcrash to done since coldcrash was ready");
  } else if (processStop){
    processStage = "noBatch";
    setValueTemp = tempColdCrash;
    Serial.println("switched from any stage to noBatch cause stop was pressed");
  }

  //If the "Next Stage" button is pressed, for testing
  if (processStage == "noBatch" & processNextStage){
    processStage = "fermentation";
    setValueTemp = tempFermentation;
    processNextStage = false;
    Serial.println("switched from batch to fermentation cause nextstage was pressed");
  } else if (processStage == "fermentation" & processNextStage){
    processStage = "diacetyl";
    diacetylReady = false;
    setValueTemp = tempDiacetylRest;
    processNextStage = false;
    Serial.println("switched from fermentation to diacetyl cause nextstage was pressed");
  } else if (processStage == "diacetyl" & processNextStage){
    processStage = "coldCrash";
    coldCrashReady = false;
    setValueTemp = tempColdCrash;
    processNextStage = false;
    Serial.println("switched from diacetly to coldcrash cause nextstage was pressed");
  } else if (processStage == "coldCrash" & processNextStage){
    processStage = "done";
    setValueTemp = tempColdCrash;
    processNextStage = false;
    Serial.println("switched from coldcrash to done cause nextstage was pressed");
  } else if (processStage == "done" & processNextStage){
    processStage = "noBatch";
    setValueTemp = tempColdCrash;
    processNextStage = false;
    Serial.println("switched from done to done noBatch cause nextstage was pressed");
  }

  //Reset Values in noBatch
  if (processStage == "done"){
    timeLeft = 0;
  }
}


//Set Stage Timers
void setDiacetylStageTimer(unsigned long currentTime){
  if (processStage == "diacetyl" & changedToDiacetyl == false){
    diacetylStartTime = currentTime;
    changedToDiacetyl = true;
    Serial.println("set diacetyl timer");
  }
  if (processStage == "noBatch"){
    changedToDiacetyl = false;
  }
}

//Set Stage Timer
void setColdCrashStageTimer(unsigned long currentTime){
  if (processStage == "coldCrash" & changedToColdCrash == false){
    coldCrashStartTime = currentTime;
    changedToColdCrash = true;
    Serial.println("set coldcrash timer");
  }
  if (processStage == "noBatch"){
    changedToColdCrash = false;
  }
}


//Pressure base solenoid out check loop
void baseSolenoidOutCheck(unsigned long currentTime, bool threshold){
  //Check every 1 second if valve is open, then close valve
  if (currentTime - prevTime_BaseSolenoidOutClose > interval_OneSecond){
    if (baseSolenoidOut == true){
      baseSolenoidOut = false;
      Serial.println("close base solenoid out");
    }
    prevTime_BaseSolenoidOutClose = currentTime;
  }

  //Check every 10 seconds if upperSetPresSurpassed is true, then open valve
  if (currentTime - prevTime_BaseSolenoidOutOpen > interval_TenSecond){
    if (threshold == true){
      baseSolenoidOut = true;
      Serial.println("open base solenoid out");
    }
    prevTime_BaseSolenoidOutOpen = currentTime;
  }
}


//Pressure base solenoid in check loop
void baseSolenoidInCheck(unsigned long currentTime, bool threshold){
  //Check every 1 second if valve is open, then close valve
  if (currentTime - prevTime_BaseSolenoidInClose > interval_OneSecond){
    if (baseSolenoidIn == true){
      baseSolenoidIn = false;
      Serial.println("close base solenoid in");
    }
    prevTime_BaseSolenoidInClose = currentTime;
  }

  //Check every 10 seconds if minSetPresSurpassed is true, then open valve
  if (currentTime - prevTime_BaseSolenoidInOpen > interval_TenSecond){
    if (threshold == true){
      baseSolenoidIn = true;
      Serial.println("open base solenoid in");
    }
    prevTime_BaseSolenoidInOpen = currentTime;
  }
}


bool checkUpperSetPresSurpassed(float upperSetPres){
  if (readingPressure > upperSetPres){
    return true;
  }
  //if not above, it's below or equal and returns false
  return false;
}


bool checkLowerSetPresSurpassed(float lowerSetPres){
  if (readingPressure < lowerSetPres){
    return true;
  }
  //if not below, it's above or equal and returns false
  return false;
}


void coldCrashStageControl(unsigned long currentTime){
  if(currentTime - coldCrashStartTime > interval_ColdCrash){
    coldCrashReady = true;
  }
}


void diacetylStageControl(unsigned long currentTime){
  if(currentTime - diacetylStartTime > interval_DiacetylRest){
    diacetylReady = true;
  }
}


//NOT DONE
void hopSolenoidOutCheck(){
   hopSolenoidOut = false;
}

//NOT DONE
void hopSolenoidInCheck(){
   hopSolenoidIn = false;
}


void timeLeftCheck(unsigned long currentTime){  
  if (processStage == "diacetyl"){
    unsigned long elapsedTime = currentTime - diacetylStartTime;
    if (elapsedTime < interval_DiacetylRest) {
      timeLeft = interval_DiacetylRest - elapsedTime;
    } else {
      timeLeft = 0;
    }
  } else if (processStage == "coldCrash"){
    unsigned long elapsedTime = currentTime - coldCrashStartTime;
    if (elapsedTime < interval_ColdCrash) {
      timeLeft = interval_ColdCrash - elapsedTime;
    } else {
      timeLeft = 0;
    }
  }

  Serial.print("time left in milliseconds: ");
  Serial.println(timeLeft);
}


/*
  Since BoardSwitch is READ_WRITE variable, onBoardSwitchChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onBoardSwitchChange()  {
  // Add your code here to act upon BoardSwitch change
}

/*
  Since DashboardLight is READ_WRITE variable, onDashboardLightChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onDashboardLightChange()  {
  // Add your code here to act upon DashboardLight change
}

/*
  Since MaxPres is READ_WRITE variable, onDashboardLightChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onMaxPresChange()  {
  // Add your code here to act upon SetValuePres change
}

/*
  Since MaxTemp is READ_WRITE variable, onDashboardLightChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onMaxTempChange()  {
  // Add your code here to act upon SetValuePres change
}

/*
  Since SurpassedMaxPres is READ_WRITE variable, onSurpassedMaxPresChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onSurpassedMaxPresChange()  {
  // Add your code here to act upon SurpassedMaxPres change
}

/*
  Since SurpassedMaxTemp is READ_WRITE variable, onSurpassedMaxTempChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onSurpassedMaxTempChange()  {
  // Add your code here to act upon SurpassedMaxTemp change
}

/*
  Since SetValuePres is READ_WRITE variable, onSetValuePresChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onSetValuePresChange()  {
  // Add your code here to act upon SetValuePres change
}

/*
  Since SetValueTemp is READ_WRITE variable, onSetValueTempChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onSetValueTempChange()  {
  // Add your code here to act upon SetValueTemp change
}

/*
  Since SystemStatus is READ_WRITE variable, onSystemStatusChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onSystemStatusChange()  {
  // Add your code here to act upon SystemStatus change
}

/*
  Since Hopper is READ_WRITE variable, onHopperChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onHopperChange()  {
  // Add your code here to act upon Hopper change
}

/*
  Since ProductValve is READ_WRITE variable, onProductValveChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onProductValveChange()  {
  // Add your code here to act upon ProductValve change
}

/*
  Since HopperValve is READ_WRITE variable, onHopperValveChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onHopperValveChange()  {
  // Add your code here to act upon HopperValve change
}

/*
  Since ValveHopper is READ_WRITE variable, onValveHopperChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onValveHopperChange()  {
  // Add your code here to act upon ValveHopper change
}

/*
  Since ValveProduct is READ_WRITE variable, onValveProductChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onValveProductChange()  {
  // Add your code here to act upon ValveProduct change
}

/*
  Since ValveWaste is READ_WRITE variable, onValveWasteChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onValveWasteChange()  {
  // Add your code here to act upon ValveWaste change
}

/*
  Since SendEmail is READ_WRITE variable, onSendEmailChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onSendEmailChange()  {
  // Add your code here to act upon SendEmail change
}

/*
  Since TempFermentation is READ_WRITE variable, onTempFermentationChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onTempFermentationChange()  {
  // Add your code here to act upon TempFermentation change
}

/*
  Since TempColdCrash is READ_WRITE variable, onTempColdCrashChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onTempColdCrashChange()  {
  // Add your code here to act upon TempColdCrash change
}

/*
  Since TempDiacetylRest is READ_WRITE variable, onTempDiacetylRestChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onTempDiacetylRestChange()  {
  // Add your code here to act upon TempDiacetylRest change
}

/*
  Since FermentationEnd is READ_WRITE variable, onFermentationEndChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onFermentationEndChange()  {
  // Add your code here to act upon FermentationEnd change
}

/*
  Since SetValueDensity is READ_WRITE variable, onSetValueDensityChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onSetValueDensityChange()  {
  // Add your code here to act upon SetValueDensity change
}

/*
  Since DiacetylRestTime is READ_WRITE variable, onDiacetylRestTimeChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onDiacetylRestTimeChange()  {
  // Add your code here to act upon DiacetylRestTime change
}

/*
  Since DiacetylRestTemp is READ_WRITE variable, onDiacetylRestTempChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onDiacetylRestTempChange()  {
  // Add your code here to act upon DiacetylRestTemp change
}

/*
  Since ColdCrashTime is READ_WRITE variable, onColdCrashTimeChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onColdCrashTimeChange()  {
  // Add your code here to act upon ColdCrashTime change
}

/*
  Since ProcessPause is READ_WRITE variable, onProcessPauseChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onProcessPauseChange()  {
  // Add your code here to act upon ProcessPause change
}

/*
  Since ProcessStart is READ_WRITE variable, onProcessStartChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onProcessStartChange()  {
  // Add your code here to act upon ProcessStart change
}

/*
  Since ProcessStop is READ_WRITE variable, onProcessStopChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onProcessStopChange()  {
  // Add your code here to act upon ProcessStop change
}

/*
  Since DiacetylThreshVal is READ_WRITE variable, onDiacetylThreshValChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onDiacetylThreshValChange()  {
  // Add your code here to act upon DiacetylThreshVal change
}

/*
  Since ProcessNextStage is READ_WRITE variable, onProcessNextStageChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onProcessNextStageChange()  {
  // Add your code here to act upon ProcessNextStage change
}

/*
  Since TimeLeft is READ_WRITE variable, onTimeLeftChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onTimeLeftChange()  {
  // Add your code here to act upon TimeLeft change
}
