  /* 
  Sketch generated by the Arduino IoT Cloud Thing "Untitled"
  https://create.arduino.cc/cloud/things/2788c8ff-181d-492b-b3bb-f66f8c82862e 

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  float maxPres;
  float maxTemp;
  float readingDensity;
  float readingPh;
  float readingPressure;
  float readingTemp;
  float setValuePres;
  float setValueTemp;
  bool sendEmailTest;
  bool surpassedMaxPres;
  bool surpassedMaxTemp;
  bool valveHopper;
  bool valveProduct;
  bool valveWaste;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/

//Includes
#include "thingProperties.h"

//Temperature Probe items, from
//Rui Santos, https://randomnerdtutorials.com
#include <OneWire.h>
#include <DallasTemperature.h>

// Data wire is conntec to the Arduino digital pin 4
#define ONE_WIRE_BUS 3

// Setup a oneWire instance to communicate with any OneWire devices
OneWire oneWire(ONE_WIRE_BUS);

// Pass our oneWire reference to Dallas Temperature sensor 
DallasTemperature sensors(&oneWire);


//Pressure Probe items
//from Ovens Garage: Pressure Sensor - Arduino
const int PressurePin = 4;
const int pressureZero = 102.1; //analog reading of pressure transducer at 0psi
const int pressureMax = 276.48; //analog reading of pressure transducer at 30psi
const int pressureTransducerMaxPSI = 30;
float pressureValue = 0;



//pin setup
//ball valves / connect to cloud
int Hopper = 18;
int Product = 19;
int Waste = 20;

//solenoid / just in esp32
int Valve1 = 21;
int Valve2 = 26;
int Valve3 = 33;
int Valve4 = 34;
int Valve5 = 35;
int Valve6 = 36;

//Sensors
//  Temperature = 3;
//  PressurePin = 4;



void setup() {
  // Initialize serial with computer and wait for port to open
  Serial.begin(19200);

  // Defined in thingProperties.h
  initProperties();

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);
  
  /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information youâ€™ll get.
     The default is 0 (only errors).
     Maximum is 4
 */
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();


  // Define Pins
  pinMode(Hopper, OUTPUT);
  pinMode(Product, OUTPUT);
  pinMode(Waste, OUTPUT);
  
  pinMode(Valve1, OUTPUT);
  pinMode(Valve2, OUTPUT);
  pinMode(Valve3, OUTPUT);
  pinMode(Valve4, OUTPUT);
  pinMode(Valve5, OUTPUT);
  pinMode(Valve6, OUTPUT);
}


void loop() {
  ArduinoCloud.update();
  
  //to automatically reconnect if wifi is lost
  WiFi.setAutoReconnect(true);
  WiFi.persistent(true);



  //Temperature Readings
  sensors.requestTemperatures();
  readingTemp = sensors.getTempCByIndex(0);
  
  //Writing to Serial just
  Serial.print("Temp is: ");
  Serial.println(readingTemp);


  /*
  //Pressure Readings - YT Vid: MESURING PRESSURE WITH ARDUINO PRESSURE SENSOR (pressure transducer)
  int analogPressure = analogRead(PressurePin); //read from sensor
  float pressureVoltage = analogPressure * (5.0 / 1023.0); //convert to voltage

  //Assume 0.5V = 0 PSI ad 4.5V = 100 PSI
  //adjust 'baselineVoltage' based on zero pressure readings

  float baselineVoltage = 0.45;
  Serial.print("baselinevoltage: ");
  Serial.print(pressureVoltage);
  Serial.println(" v");
  float pressure = (pressureVoltage - baselineVoltage) * (100.0 / (4.5 - baselineVoltage));

  Serial.print("Pressure: ");
  Serial.print(pressure);
  Serial.println(" psi");

  readingPressure = pressure;
  */

  pressureValue = analogRead(PressurePin);
  pressureValue = ((pressureValue - pressureZero)*pressureTransducerMaxPSI)/(pressureMax - pressureZero);
  Serial.print(pressureValue, 1);
  Serial.println("psi");

  readingPressure = pressureValue;
  
  
  if (valveHopper == true){
    digitalWrite(Hopper, HIGH);
  }
  if (valveHopper == false){
    digitalWrite(Hopper, LOW);
  }


  if (valveProduct == true){
    digitalWrite(Product, HIGH);
  }
  if (valveProduct == false){
    digitalWrite(Product, LOW);
  }


  if (valveWaste == true){
    digitalWrite(Waste, HIGH);
  }
  if (valveWaste == false){
    digitalWrite(Waste, LOW);
  }



  if (readingTemp > maxTemp){
    surpassedMaxTemp = true;
  }

  if (readingPressure > maxPres){
    surpassedMaxPres = true;
  }

  if (surpassedMaxTemp == true || surpassedMaxPres == true){
    systemStatus = false;
  } else {
    systemStatus = true;
  }
}














/*
  Since BoardSwitch is READ_WRITE variable, onBoardSwitchChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onBoardSwitchChange()  {
  // Add your code here to act upon BoardSwitch change
}

/*
  Since DashboardLight is READ_WRITE variable, onDashboardLightChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onDashboardLightChange()  {
  // Add your code here to act upon DashboardLight change
}

/*
  Since MaxPres is READ_WRITE variable, onDashboardLightChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onMaxPresChange()  {
  // Add your code here to act upon SetValuePres change
}

/*
  Since MaxTemp is READ_WRITE variable, onDashboardLightChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onMaxTempChange()  {
  // Add your code here to act upon SetValuePres change
}

/*
  Since SurpassedMaxPres is READ_WRITE variable, onSurpassedMaxPresChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onSurpassedMaxPresChange()  {
  // Add your code here to act upon SurpassedMaxPres change
}

/*
  Since SurpassedMaxTemp is READ_WRITE variable, onSurpassedMaxTempChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onSurpassedMaxTempChange()  {
  // Add your code here to act upon SurpassedMaxTemp change
}

/*
  Since SetValuePres is READ_WRITE variable, onSetValuePresChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onSetValuePresChange()  {
  // Add your code here to act upon SetValuePres change
}

/*
  Since SetValueTemp is READ_WRITE variable, onSetValueTempChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onSetValueTempChange()  {
  // Add your code here to act upon SetValueTemp change
}

/*
  Since SystemStatus is READ_WRITE variable, onSystemStatusChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onSystemStatusChange()  {
  // Add your code here to act upon SystemStatus change
}

/*
  Since Hopper is READ_WRITE variable, onHopperChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onHopperChange()  {
  // Add your code here to act upon Hopper change
}


/*
  Since ProductValve is READ_WRITE variable, onProductValveChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onProductValveChange()  {
  // Add your code here to act upon ProductValve change
}

/*
  Since HopperValve is READ_WRITE variable, onHopperValveChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onHopperValveChange()  {
  // Add your code here to act upon HopperValve change
}

/*
  Since ValveHopper is READ_WRITE variable, onValveHopperChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onValveHopperChange()  {
  // Add your code here to act upon ValveHopper change
}

/*
  Since ValveProduct is READ_WRITE variable, onValveProductChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onValveProductChange()  {
  // Add your code here to act upon ValveProduct change
}

/*
  Since ValveWaste is READ_WRITE variable, onValveWasteChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onValveWasteChange()  {
  // Add your code here to act upon ValveWaste change
}
